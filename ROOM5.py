# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1URpH_MszVuFi_E-Bx56cbH0Nw8jo49Ba

exo 1
"""

import math

class Cercle:
    def __init__(self, rayon):
        """Initialise un cercle avec le rayon donné."""
        self.rayon = rayon

    def surface(self):
        """Retourne la surface du cercle."""
        return math.pi * (self.rayon ** 2)

    def perimetre(self):
        """Retourne le périmètre du cercle."""
        return 2 * math.pi * self.rayon

    def __str__(self):
        """Retourne une représentation en chaîne de caractères du cercle."""
        return f"Cercle de rayon {self.rayon:.2f} unités"

# Exemple d'utilisation de la classe Cercle
if __name__ == "__main__":
    # Créer une instance de Cercle avec un rayon de 5
    mon_cercle = Cercle(5)

    # Afficher les informations sur le cercle
    print(mon_cercle)

    # Calculer et afficher la surface du cercle
    print(f"Surface: {mon_cercle.surface():.2f}")

    # Calculer et afficher le périmètre du cercle
    print(f"Périmètre: {mon_cercle.perimetre():.2f}")

"""EX0 2"""

class Calculatrice:
    def __init__(self):
        pass

    def addition(self, a, b):
        return a + b

    def soustraction(self, a, b):
        return a - b

    def multiplication(self, a, b):
        return a * b

    def division(self, a, b):
        if b == 0:
            raise ValueError("La division par zéro n'est pas autorisée.")
        return a / b

def demander_nombre(message):
    while True:
        try:
            return float(input(message))
        except ValueError:
            print("Ce n'est pas un nombre valide. Veuillez essayer encore.")

if __name__ == "__main__":
    calc = Calculatrice()

    print("Bienvenue dans la calculatrice!")

    a = demander_nombre("Entrez le premier nombre : ")
    b = demander_nombre("Entrez le deuxième nombre : ")

    print(f"Addition de {a} et {b}: {calc.addition(a, b)}")
    print(f"Soustraction de {a} et {b}: {calc.soustraction(a, b)}")
    print(f"Multiplication de {a} et {b}: {calc.multiplication(a, b)}")

    try:
        print(f"Division de {a} et {b}: {calc.division(a, b)}")
    except ValueError as e:
        print(e)

    try:
        div_zero = demander_nombre("Entrez un nombre pour tenter une division par zéro : ")
        print(f"Division de {a} par {div_zero}: {calc.division(a, div_zero)}")
    except ValueError as e:
        print(e)

"""Exo 3"""

from datetime import datetime

class Personne:
    def __init__(self, nom, pays, date_naissance):
        self.nom = nom
        self.pays = pays
        self.date_naissance = date_naissance

    def calculer_age(self):
        aujourd_hui = datetime.now()
        age = aujourd_hui.year - self.date_naissance.year - ((aujourd_hui.month, aujourd_hui.day) < (self.date_naissance.month, self.date_naissance.day))
        return age

# Création d'une instance de Personne
date_naissance = datetime(2002, 9, 21)  # Exemple de date
personne = Personne("Mouf Ali", "Somalie", date_naissance)

# Affichage des informations
print(f"Nom: {personne.nom}")
print(f"Pays: {personne.pays}")
print(f"Date de naissance: {personne.date_naissance.date()}")
print(f"Âge: {personne.calculer_age()} ans")

"""EXO 4 parti 1 ( creation d une base des donnees)"""

import sqlite3

# Connexion à la base de données (création de la base si elle n'existe pas)

connexion = sqlite3.connect('ecole.db')

# Création d'un curseur pour interagir avec la base de données

curseur = connexion.cursor()

# Création de la table "eleves"

curseur.execute('''

    CREATE TABLE IF NOT EXISTS eleves (

        id INTEGER PRIMARY KEY AUTOINCREMENT,

        nom TEXT NOT NULL,

        prenom TEXT NOT NULL,

        age INTEGER NOT NULL

    )

''')

# Sauvegarde des changements

connexion.commit()

# Fermeture de la connexion

connexion.close()

print("Créer la base de données.")

"""partie 2 (Insérer des enregistrements (données))"""

# Connexion à la base de données
conn = sqlite3.connect('ecole.db')
cursor = conn.cursor()

# Insertion de données
eleves = [
    ('Dajieh', 'Hassan', 14),
    ('Omar', 'Warfa', 15),
    ('ALI', 'Guedi', 13)
]
cursor.executemany('''
INSERT INTO eleves (nom, prenom, age) VALUES (?, ?, ?)
''', eleves)

# Confirmation des modifications
conn.commit()
conn.close()

"""Parti 3(Modifier les enregistrements)"""

# Connexion à la base de données
conn = sqlite3.connect('ecole.db')
cursor = conn.cursor()

# Mise à jour des données
cursor.execute('''
UPDATE eleves
SET age = ?
WHERE nom = ? AND prenom = ?
''', (16, 'Omar', 'Warfa'))

# Confirmation des modifications
conn.commit()
conn.close()

"""parti 4(requete)"""

# Connexion à la base de données
conn = sqlite3.connect('ecole.db')
cursor = conn.cursor()

# Sélection des données
cursor.execute('SELECT * FROM eleves')
resultats = cursor.fetchall()

# Affichage des résultats
for eleve in resultats:
    print(eleve)

# Fermeture de la connexion
conn.close()

"""Exo 4 complet"""

import sqlite3

# Connexion à la base de données (création de la base si elle n'existe pas)

connexion = sqlite3.connect('ecole.db')

# Création d'un curseur pour interagir avec la base de données

curseur = connexion.cursor()

# Création de la table "eleves"

curseur.execute('''

    CREATE TABLE IF NOT EXISTS eleves (

        id INTEGER PRIMARY KEY AUTOINCREMENT,

        nom TEXT NOT NULL,

        prenom TEXT NOT NULL,

        age INTEGER NOT NULL

    )

''')

# Sauvegarde des changements

connexion.commit()

# Fermeture de la connexion

connexion.close()

print("Créer la base de données.")

# Connexion à la base de données
conn = sqlite3.connect('ecole.db')
cursor = conn.cursor()

# Insertion de données
eleves = [
    ('Dajieh', 'Hassan', 14),
    ('Omar', 'Warfa', 15),
    ('ALI', 'Guedi', 13)
]
cursor.executemany('''
INSERT INTO eleves (nom, prenom, age) VALUES (?, ?, ?)
''', eleves)

# Confirmation des modifications
conn.commit()
conn.close()

# Connexion à la base de données
conn = sqlite3.connect('ecole.db')
cursor = conn.cursor()

# Mise à jour des données
cursor.execute('''
UPDATE eleves
SET age = ?
WHERE nom = ? AND prenom = ?
''', (10, 'Omar', 'Warfa'))

# Confirmation des modifications
conn.commit()
conn.close()
# Connexion à la base de données
conn = sqlite3.connect('ecole.db')
cursor = conn.cursor()

# Sélection des données
cursor.execute('SELECT * FROM eleves')
resultats = cursor.fetchall()

# Affichage des résultats
for eleve in resultats:
    print(eleve)

# Fermeture de la connexion
conn.close()