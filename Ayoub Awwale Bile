
                                                  EXercice 1 


import random

def afficher_plateau(plateau):
    for ligne in plateau:
        print(" ".join(ligne))
    print()

def creer_plateau(n, m):
    return [["*" for _ in range(m)] for _ in range(n)]

def positionner_tresor(n, m):
    while True:
        try:
            ligne = int(input(f"Entrez le numéro de ligne (0 à {n-1}) pour cacher le trésor: "))
            colonne = int(input(f"Entrez le numéro de colonne (0 à {m-1}) pour cacher le trésor: "))
            if 0 <= ligne < n and 0 <= colonne < m:
                return ligne, colonne
            else:
                print("Position invalide. Veuillez réessayer.")
        except ValueError:
            print("Entrée non valide. Veuillez entrer des numéros valides.")

def positionner_piege(n, m, ligne_tresor, colonne_tresor):
    while True:
        ligne_piege = random.randint(0, n-1)
        colonne_piege = random.randint(0, m-1)
        if (ligne_piege != ligne_tresor) or (colonne_piege != colonne_tresor):
            return ligne_piege, colonne_piege

def deviner_tresor(n, m):
    while True:
        try:
            ligne = int(input(f"Devinez le numéro de ligne (0 à {n-1}) du trésor: "))
            colonne = int(input(f"Devinez le numéro de colonne (0 à {m-1}) du trésor: "))
            if 0 <= ligne < n and 0 <= colonne < m:
                return ligne, colonne
            else:
                print("Position invalide. Veuillez réessayer.")
        except ValueError:
            print("Entrée non valide. Veuillez entrer des numéros valides.")

def jeu_chasse_tresor():
    print("Bienvenue dans le jeu de chasse au trésor!")
    n = int(input("Entrez le nombre de lignes du plateau: "))
    m = int(input("Entrez le nombre de colonnes du plateau: "))

    plateau = creer_plateau(n, m)
    afficher_plateau(plateau)

    ligne_tresor, colonne_tresor = positionner_tresor(n, m)
    ligne_piege, colonne_piege = positionner_piege(n, m, ligne_tresor, colonne_tresor)
    
    plateau[ligne_tresor][colonne_tresor] = "T"
    plateau[ligne_piege][colonne_piege] = "X"
    
    print("Le trésor et le piège ont été placés.")
    afficher_plateau(plateau)
    
    while True:
        ligne_devinee, colonne_devinee = deviner_tresor(n, m)
        
        if ligne_devinee == ligne_tresor and colonne_devinee == colonne_tresor:
            print("Félicitations! Vous avez trouvé le trésor!")
            break
        elif ligne_devinee == ligne_piege and colonne_devinee == colonne_piege:
            print("Oh non! Vous êtes tombé dans le piège!")
            break
        else:
            print("Pas de trésor ici. Essayez encore!")



                                                                      Exercice 2


def calculate_bmi(poids, taille):
    """Calcule l'IMC à partir du poids (kg) et de la taille (m), et retourne l'IMC arrondi à deux décimales."""
    imc = poids / (taille ** 2)
    return round(imc, 2)

def obtenir_categorie_sante(imc):
    """Retourne la catégorie de santé basée sur l'IMC."""
    if imc < 18.5:
        return "Insuffisance pondérale"
    elif 18.5 <= imc < 25:
        return "Poids normal"
    elif 25 <= imc < 30:
        return "Surpoids"
    else:
        return "Obésité"

def convertir_poids_livres_en_kg(poids_livres):
    """Convertit le poids de livres en kilogrammes."""
    return poids_livres / 2.20462

def convertir_taille_pouces_en_metres(taille_pouces):
    """Convertit la taille de pouces en mètres."""
    return taille_pouces / 39.3701

def main():
    print("Bienvenue dans le calculateur d'IMC!")
    unite_poids = input("Voulez-vous entrer le poids en kilogrammes (kg) ou en livres (lb)? ").strip().lower()
    unite_taille = input("Voulez-vous entrer la taille en mètres (m) ou en pouces (in)? ").strip().lower()

    if unite_poids == "kg":
        poids = float(input("Entrez votre poids en kilogrammes: "))
    elif unite_poids == "lb":
        poids_livres = float(input("Entrez votre poids en livres: "))
        poids = convertir_poids_livres_en_kg(poids_livres)
    else:
        print("Unité de poids non reconnue.")
        return

    if unite_taille == "m":
        taille = float(input("Entrez votre taille en mètres: "))
    elif unite_taille == "in":
        taille_pouces = float(input("Entrez votre taille en pouces: "))
        taille = convertir_taille_pouces_en_metres(taille_pouces)
    else:
        print("Unité de taille non reconnue.")
        return

    imc = calculate_bmi(poids, taille)
    categorie = obtenir_categorie_sante(imc)

    print(f"Votre IMC est de {imc}. Catégorie de santé : {categorie}.")


                                                EXERCICE 3


import string

def nettoyer_chaine(input_string):
    """Nettoie la chaîne en supprimant les caractères non alphanumériques et en convertissant en minuscules."""
    return ''.join(char.lower() for char in input_string if char.isalnum())

def is_palindrome_while(input_string):
    """Vérifie si une chaîne est un palindrome en utilisant une boucle while."""
    cleaned_string = nettoyer_chaine(input_string)
    left, right = 0, len(cleaned_string) - 1
    
    while left < right:
        if cleaned_string[left] != cleaned_string[right]:
            return False
        left += 1
        right -= 1
    
    return True

def is_palindrome_for(input_string):
    """Vérifie si une chaîne est un palindrome en utilisant une boucle for."""
    cleaned_string = nettoyer_chaine(input_string)
    length = len(cleaned_string)
    
    for i in range(length // 2):
        if cleaned_string[i] != cleaned_string[length - 1 - i]:
            return False
    
    return True

# Test des fonctions avec des exemples d'entrées
test_phrases = [
    "A man, a plan, a canal, Panama",
    "No 'x' in Nixon",
    "racecar",
    "hello",
    "Madam, in Eden, I'm Adam"
]

for phrase in test_phrases:
    print(f"Phrase: {phrase}")
    print(f"Palindrome (while loop) : {is_palindrome_while(phrase)}")
    print(f"Palindrome (for loop) : {is_palindrome_for(phrase)}")
