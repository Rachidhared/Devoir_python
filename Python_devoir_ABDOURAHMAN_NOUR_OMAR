Exo 1: 
import random

def create_board(n, m):
    return [['*' for _ in range(m)] for _ in range(n)]

def display_board(board):
    for row in board:
        print(' '.join(row))

def place_treasure(board, x, y):
    board[x][y] = 'T'

def place_trap(board, n, m):
    while True:
        trap_x = random.randint(0, n - 1)
        trap_y = random.randint(0, m - 1)
        if board[trap_x][trap_y] != 'T':
            board[trap_x][trap_y] = 'X'
            break

def main():
    n = int(input("Entrez le nombre de lignes: "))
    m = int(input("Entrez le nombre de colonnes: "))
    
    board = create_board(n, m)
    
    while True:
        try:
            treasure_x = int(input(f"Entrez la ligne (0-{n-1}) pour cacher le trésor: "))
            treasure_y = int(input(f"Entrez la colonne (0-{m-1}) pour cacher le trésor: "))
            if 0 <= treasure_x < n and 0 <= treasure_y < m:
                break
            else:
                print("Coordonnées invalides, veuillez réessayer.")
        except ValueError:
            print("Entrée invalide, veuillez entrer des nombres.")
    
    place_treasure(board, treasure_x, treasure_y)
    place_trap(board, n, m)
    
    display_board(board)

    while True:
        try:
            guess_x = int(input(f"Devinez la ligne (0-{n-1}): "))
            guess_y = int(input(f"Devinez la colonne (0-{m-1}): "))
            if guess_x == treasure_x and guess_y == treasure_y:
                print("Félicitations! Vous avez trouvé le trésor!")
                break
            elif board[guess_x][guess_y] == 'X':
                print("Oh non! Vous êtes tombé dans un piège!")
                break
            else:
                print("Essayez encore!")
        except ValueError:
            print("Entrée invalide, veuillez entrer des nombres.")

if __name__ == "__main__":
    main()


Exo 2: 

def calculate_bmi(poids, taille):
    return round(poids / (taille ** 2), 2)

def main():
    poids = float(input("Entrez votre poids en kilogrammes: "))
    taille = float(input("Entrez votre taille en mètres: "))
    
    imc = calculate_bmi(poids, taille)
    print(f"Votre IMC est: {imc}")
    
    if imc < 18.5:
        print("Catégorie: Insuffisance pondérale")
    elif 18.5 <= imc < 25:
        print("Catégorie: Poids normal")
    elif 25 <= imc < 30:
        print("Catégorie: Surpoids")
    else:
        print("Catégorie: Obésité")

    choix = input("Voulez-vous entrer les mesures en livres et pouces? (oui/non): ").lower()
    if choix == 'oui':
        poids_lb = float(input("Entrez votre poids en livres: "))
        taille_in = float(input("Entrez votre taille en pouces: "))
        
        poids_kg = poids_lb / 2.20462
        taille_m = taille_in / 39.3701
        
        imc = calculate_bmi(poids_kg, taille_m)
        print(f"Votre IMC est: {imc}")
        
        if imc < 18.5:
            print("Catégorie: Insuffisance pondérale")
        elif 18.5 <= imc < 25:
            print("Catégorie: Poids normal")
        elif 25 <= imc < 30:
            print("Catégorie: Surpoids")
        else:
            print("Catégorie: Obésité")

if __name__ == "__main__":
    main()





Exo 3: 

import re
def est_palindrome_while(chaine):
    chaine_nettoyee = re.sub(r'[^A-Za-z0-9]', '', chaine).lower()
    gauche = 0
    droite = len(chaine_nettoyee) - 1
    
    while gauche < droite:
        if chaine_nettoyee[gauche] != chaine_nettoyee[droite]:
            return False
        gauche += 1
        droite -= 1
    return True


def est_palindrome_for(chaine):
    chaine_nettoyee = re.sub(r'[^A-Za-z0-9]', '', chaine).lower() 
    for i in range(len(chaine_nettoyee) // 2):
        if chaine_nettoyee[i] != chaine_nettoyee[-(i + 1)]:
            return False
    return True
def principal():
    chaines_test = [
        "Un radar",
        "Élu par cette crapule",
        "Un bon snob nu",
        "Pas un palindrome"
    ]
    
    for c in chaines_test:
        print(f"Test de: {c}")
        print(f"Vérification avec while: {'Palindrome' if est_palindrome_while(c) else 'Pas un palindrome'}")
        print(f"Vérification avec for: {'Palindrome' if est_palindrome_for(c) else 'Pas un palindrome'}")
        print()

if __name__ == "__main__":
    principal()



















